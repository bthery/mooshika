RREPLAY(1)
==========
:doctype: manpage

NAME
----
rreplay - RDMA replay

SYNOPSIS
--------
*rreplay* {{-s|-S addr} port|-c addr port} [-f pcap.out] [-B] [-n] [-b bsize] [-r recv-num] [-v] [-q]

DESCRIPTION
-----------
rreplay - RDMA replay. Replay a send/recv dump made with rmitm.

OPTIONS
-------
There is only one mandatory option, is rcat used as a client (and if so what's the server) or as a server? It can be one of the following:

*-c, --client* 'server' 'port'::
  We're a client, connect to 'server' on 'port'. 'server' can be an IP address or hostname pointing to an IP, 'port' can be numeric or a service name.

*-s, --server* 'port'::
  We're a server, bind to all possible interfaces and IPs on 'port'.

*-S 'IP' 'port'*::
  We're a server, bind to a specific 'IP' (and only on the interface associated to it) on 'port'.

There are multiple optional options:

*-f, --file* 'file'::
  Dump pcap output to 'file'. Can be ``-'' for stdout.

*-B, --banner*::
  If set, the server is expected to talk first. That's what rreplay uses to decide which side of the connexion is server and client in the dump.

*-n, --no-check*::
  Do not verify that the received data is what we expected. This may be necessary if the information the server sends will vary on replay, e.g. if there are timestamps in some messages.

*-b, --block-size* 'size'::
  Maximum size of the packets rreplay will be able to handle (receive and forward).
  Defaults to 1M.

*-r, --recv-num* 'num'::
  Number of packets we can receive at once.
  Defaults to 10.

*-v, --verbose*::
  Increase verbosity everytime it appears, e.g. -vvv will be more verbose than -v. Actually switches one more MSK_DEBUG_* flag on everytime.

*-q, --quiet*::
  Opposite operation.

EXAMPLES
--------

.rmitm
You can keep the dump, with error injection, and replay the incrimined dump later.

----
  server$ rmitm -c remote 5640 -s 5640 -w pcap.out -t 1M -E 0.02 -e 0.02
  server$ rreplay -c remote 5640 -f pcap.out -n
----

SEE ALSO
--------
mooshika(3), rcat(1), rmitm(1)

AUTHORS
-------
mooshika and its tools have been written by Dominique Martinet <dominique.martinet@cea.fr>

RESOURCES
---------
https://github.com/martinetd/mooshika
